plugins {
	id 'fabric-loom' version "1.6.+" // To use chocoloom, change the version to a commit hash
	id 'legacy-looming' version '1.3.+'
	id 'com.modrinth.minotaur' version "2.+"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.legacyfabric:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation(include(legacy.apiModule("legacy-fabric-api-base", project.fabric_version)))
	modImplementation(include(legacy.apiModule("legacy-fabric-api-base-common", project.fabric_version)))
	modImplementation(include(legacy.apiModule("legacy-fabric-keybindings-api-v1-common", project.fabric_version)))
	modImplementation(include(legacy.apiModule("legacy-fabric-lifecycle-events-v1", project.fabric_version)))
	modImplementation(include(legacy.apiModule("legacy-fabric-lifecycle-events-v1-common", project.fabric_version)))
	modImplementation(include(legacy.apiModule("legacy-fabric-logger-api-v1", project.fabric_version)))
	modImplementation(include(legacy.apiModule("legacy-fabric-resource-loader-v1", project.fabric_version)))
	modImplementation(include(legacy.apiModule("legacy-fabric-resource-loader-v1-common", project.fabric_version)))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	if (JavaVersion.current().isJava9Compatible()) it.options.release = 8
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// select the repositories you want to publish to
	repositories {
		if (project.hasProperty('legacy_fabric_maven_publish_token')) {
			maven {
				url 'https://maven.legacyfabric.net/'
				credentials {
					username 'BobTheBuildSlave'
					password project.getProperty('legacy_fabric_maven_publish_token')
				}
			}
		} else {
			maven {
				maven {
					name 'Repsy'
					credentials(PasswordCredentials)
					url 'https://repsy.io/mvn/enderzombi102/mc'
				}
			}
		}
	}
}

modrinth {
	token = project.hasProperty('modrinth_token') ? project.getProperty("modrinth_token") : ""
	projectId = 'XzTYkVLx'
	versionNumber = project.version // You don't need to set this manually. Will fail if Modrinth has this version already
	versionName = "Legacy Mod Menu $project.version"
	versionType = 'release' // This is the default
	uploadFile = remapJar // With Fabric Loom or Architectury Loom, this MUST be set to `remapJar` instead of `jar`!
	gameVersions = [project.minecraft_version] // Must be an array, even with only one version
	loaders = ['fabric'] // Must also be an array - no need to specify this if you're using Fabric Loom or ForgeGradle
	dependencies = []
}
